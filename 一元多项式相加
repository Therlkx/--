#include<stdio.h>
#include<malloc.h>

#define LEN sizeof(Poly)

typedef struct term{
	float coef;  //系数 
	int expn;	 //指数 
	struct term* next;
}Poly, * Link;

Link CreatePolyn(Link* p, int m);//创建一元多项式
void PrintPolyn(Link p);//打印多项式
int cmp(Link p1, Link p2);//比较两个多项式返回相应的值
Link AddPolyn(Link pa, Link pb);//两个多项式相加，返回相加后的链表表头
Link LinkInsertSort(Link head);//插入排序

int main()
{
	Link P1, P2,P3;
	int L1, L2;
	printf("请输入第一个多项式的项数：");
	scanf("%d", &L1);
	P1 = CreatePolyn(&P1, L1);
	LinkInsertSort(P1);
	printf("第一个多项式为：");
	PrintPolyn(P1);
	printf("请输入第二个多项式的项数：");
	scanf("%d", &L2);
	P2 = CreatePolyn(&P2, L2);
	LinkInsertSort(P2);
	printf("第二个多项式为：");
	PrintPolyn(P2);
	printf("\n");
	P3 = AddPolyn(P1, P2);
	printf("两个一元多项式相加的结果为：");
	PrintPolyn(P3);
}

Link CreatePolyn(Link* p, int m)
{
	Link r, s,q;
	int i;
	*p = (Link)malloc(LEN);
	r = *p;
	q = r;
	for (i = 0; i < m; i++)
	{
		s = (Link)malloc(LEN);
		printf("输入系数和指数（以空格隔开）:");
		scanf("%f %d", &s->coef, &s->expn);
		r->next = s;
		r = s;
	}
	r->next = NULL;
	return q;
}

void PrintPolyn(Link p)
{
	Link s;
	s = p->next;
	while (s)
	{
		printf("%.2f X^%d", s->coef, s->expn);
		s = s->next;
		if (s != NULL) 
			if (s->coef >= 0) printf("+");
	}
	printf("\n");
}
int cmp(Link a, Link b)
{
	if (a->expn < b->expn) return  -1;
	else if (a->expn == b->expn) return  0;
	else return 1;
}
Link AddPolyn(Link pa, Link pb)  
{
	Link newp, p, q, s, pc;
	float sum;
	p = pa->next; 
	q = pb->next; 
	newp = (Link)malloc(LEN); 
	pc = newp;
	while (p && q) {
		switch (cmp(p, q))
		{
		case -1:   
			s = (Link)malloc(LEN);
			s->coef = p->coef;
			s->expn = p->expn;
			pc->next = s;
			pc = s;
			p = p->next;
			break;
		case 0: 
			sum = p->coef + q->coef;
			if (sum != 0.0)
			{
				s = (Link)malloc(LEN);
				s->coef = sum;
				s->expn = p->expn;
				pc->next = s;
				pc = s;
			}
			p = p->next;
			q = q->next;
			break;
		case 1: 
			s = (Link)malloc(LEN);
			s->coef = q->coef;
			s->expn = q->expn;
			pc->next = s;
			pc = s;
			q = q->next;
			break;
		}
	}
	while (p)
	{
		s = (Link)malloc(LEN);
		s->coef = p->coef;
		s->expn = p->expn;
		pc->next = s;
		pc = s;
		p = p->next;
	}
	while (q)
	{
		s = (Link)malloc(LEN);
		s->coef = q->coef;
		s->expn = q->expn;
		pc->next = s;
		pc = s;
		q = q->next;
	}
	pc->next = NULL;
	return newp;
}

Link LinkInsertSort(Link head)
{
	//current指向当前待插入的结点。
	Link head2, current, p, q;

	if (head == NULL)
		return head;

	//第一次拆分。
	head2 = head->next;
	head->next = NULL;

	while (head2)
	{
		current = head2;
		head2 = head2->next;

		//寻找插入位置，插入位置为结点p和q中间。
		for (p = NULL, q = head; q && q->expn <= current->expn; p = q, q = q->next);

		if (q == head)
		{
			//将current插入最前面。
			head = current;
		}
		else
		{
			p->next = current;
		}
		current->next = q;
	}
	return head;
}
